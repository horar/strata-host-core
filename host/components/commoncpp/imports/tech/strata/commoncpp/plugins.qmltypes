import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump tech.strata.commoncpp 1.0 ./imports -qapp -nonrelocatable'

Module {
    dependencies: ["QtQuick 2.12"]
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Method {
            name: "mapToSource"
            type: "QModelIndex"
            Parameter { name: "proxyIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapFromSource"
            type: "QModelIndex"
            Parameter { name: "sourceIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapSelectionToSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
        Method {
            name: "mapSelectionFromSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
    }
    Component {
        name: "QSortFilterProxyModel"
        prototype: "QAbstractProxyModel"
        Property { name: "filterRegExp"; type: "QRegExp" }
        Property { name: "filterRegularExpression"; type: "QRegularExpression" }
        Property { name: "filterKeyColumn"; type: "int" }
        Property { name: "dynamicSortFilter"; type: "bool" }
        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "isSortLocaleAware"; type: "bool" }
        Property { name: "sortRole"; type: "int" }
        Property { name: "filterRole"; type: "int" }
        Property { name: "recursiveFilteringEnabled"; type: "bool" }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "regExp"; type: "QRegExp" }
        }
        Method {
            name: "setFilterRegularExpression"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterRegularExpression"
            Parameter { name: "regularExpression"; type: "QRegularExpression" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "string" }
        }
        Method { name: "clear" }
        Method { name: "invalidate" }
    }
    Component {
        name: "SGJLinkConnector"
        prototype: "QObject"
        exports: ["tech.strata.commoncpp/SGJLinkConnector 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ProcessType"
            values: {
                "PROCESS_NO_PROCESS": 0,
                "PROCESS_CHECK_CONNECTION": 1,
                "PROCESS_PROGRAM": 2
            }
        }
        Property { name: "exePath"; type: "string" }
        Property { name: "eraseBeforeProgram"; type: "bool" }
        Signal {
            name: "checkConnectionProcessFinished"
            Parameter { name: "exitedNormally"; type: "bool" }
            Parameter { name: "connected"; type: "bool" }
        }
        Signal {
            name: "programBoardProcessFinished"
            Parameter { name: "exitedNormally"; type: "bool" }
        }
        Signal { name: "deviceChanged" }
        Signal { name: "speedChanged" }
        Method { name: "checkConnectionRequested"; type: "bool" }
        Method {
            name: "programBoardRequested"
            type: "bool"
            Parameter { name: "binaryPath"; type: "string" }
        }
    }
    Component {
        name: "SGQWTPlot"
        defaultProperty: "data"
        prototype: "QQuickPaintedItem"
        exports: ["tech.strata.commoncpp/SGQWTPlot 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "xMin"; type: "double" }
        Property { name: "xMax"; type: "double" }
        Property { name: "yMin"; type: "double" }
        Property { name: "yMax"; type: "double" }
        Property { name: "yRightMin"; type: "double" }
        Property { name: "yRightMax"; type: "double" }
        Property { name: "xTitle"; type: "string" }
        Property { name: "xTitlePixelSize"; type: "int" }
        Property { name: "yTitle"; type: "string" }
        Property { name: "yTitlePixelSize"; type: "int" }
        Property { name: "yRightTitle"; type: "string" }
        Property { name: "yRightTitlePixelSize"; type: "int" }
        Property { name: "title"; type: "string" }
        Property { name: "titlePixelSize"; type: "int" }
        Property { name: "xLogarithmic"; type: "bool" }
        Property { name: "yLogarithmic"; type: "bool" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "foregroundColor"; type: "QColor" }
        Property { name: "autoUpdate"; type: "bool" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "xGrid"; type: "bool"}
        Property { name: "yGrid"; type: "bool"}
        Property { name: "xMinorGrid"; type: "bool"}
        Property { name: "yMinorGrid"; type: "bool"}
        Property { name: "gridColor"; type: "QColor"}
        Property { name: "yRightVisible"; type: "bool"}
        Property { name: "yAxisLeft"; type: "bool"}
        Method { name: "initialize" }
        Method { name: "update" }
        Method {
            name: "shiftXAxis"
            Parameter { name: "offset"; type: "double" }
        }
        Method {
            name: "shiftYAxis"
            Parameter { name: "offset"; type: "double" }
        }
        Method {
            name: "shiftYAxisRight"
            Parameter { name: "offset"; type: "double" }
        }
        Method { name: "autoScaleXAxis" }
        Method { name: "autoScaleYAxis" }
        Method {
            name: "createCurve"
            type: "SGQWTPlotCurve*"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "curve"
            type: "SGQWTPlotCurve*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "removeCurve"
            Parameter { name: "curve"; type: "SGQWTPlotCurve"; isPointer: true }
        }
        Method {
            name: "removeCurve"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "mapToValue"
            type: "QPointF"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapToValueYRight"
            type: "QPointF"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapToPosition"
            type: "QPointF"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapToPositionYRight"
            type: "QPointF"
            Parameter { name: "point"; type: "QPointF" }
        }
    }
    Component {
        name: "SGQWTPlotCurve"
        prototype: "QObject"
        exports: ["tech.strata.commoncpp/SGQWTPlotCurve 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "graph"; type: "SGQWTPlot"; isPointer: true }
        Property { name: "color"; type: "QColor" }
        Property { name: "name"; type: "string" }
        Property { name: "autoUpdate"; type: "bool" }
        Method {
            name: "append"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "appendList"
            Parameter { name: "list"; type: "QVariantList" }
        }
        Method {
            name: "remove"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "clear" }
        Method {
            name: "at"
            type: "QPointF"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "count"; type: "int" }
        Method {
            name: "shiftPoints"
            Parameter { name: "offsetX"; type: "double" }
            Parameter { name: "offsetY"; type: "double" }
        }
        Method { name: "update" }
    }
    Component {
        name: "SGSortFilterProxyModel"
        prototype: "QSortFilterProxyModel"
        exports: ["tech.strata.commoncpp/SGSortFilterProxyModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FilterSyntax"
            values: {
                "RegExp": 0,
                "Wildcard": 1,
                "FixedString": 2
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "sourceModel"; type: "QObject"; isPointer: true }
        Property { name: "sortRole"; type: "string" }
        Property { name: "filterRole"; type: "string" }
        Property { name: "filterPattern"; type: "string" }
        Property { name: "filterPatternSyntax"; type: "FilterSyntax" }
        Property { name: "naturalSort"; type: "bool" }
        Property { name: "sortAscending"; type: "bool" }
        Property { name: "caseSensitive"; type: "bool" }
        Property { name: "invokeCustomFilter"; type: "bool" }
        Property { name: "invokeCustomLessThan"; type: "bool" }
        Property { name: "sortEnabled"; type: "bool" }
        Method {
            name: "naturalCompare"
            type: "int"
            Parameter { name: "left"; type: "string" }
            Parameter { name: "right"; type: "string" }
        }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "mapIndexToSource"
            type: "int"
            Parameter { name: "i"; type: "int" }
        }
        Method {
            name: "mapIndexFromSource"
            type: "int"
            Parameter { name: "i"; type: "int" }
        }
    }
    Component {
        name: "SGUtilsCpp"
        prototype: "QObject"
        exports: ["tech.strata.commoncpp/SGUtilsCpp 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "urlToLocalFile"
            type: "string"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "isFile"
            type: "bool"
            Parameter { name: "file"; type: "string" }
        }
        Method {
            name: "isExecutable"
            type: "bool"
            Parameter { name: "file"; type: "string" }
        }
        Method {
            name: "fileName"
            type: "string"
            Parameter { name: "file"; type: "string" }
        }
        Method {
            name: "fileAbsolutePath"
            type: "string"
            Parameter { name: "file"; type: "string" }
        }
        Method {
            name: "dirName"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "pathToUrl"
            type: "QUrl"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "scheme"; type: "string" }
        }
        Method {
            name: "pathToUrl"
            type: "QUrl"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "atomicWrite"
            type: "bool"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "content"; type: "string" }
        }
        Method {
            name: "readTextFileContent"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "toBase64"
            type: "QByteArray"
            Parameter { name: "text"; type: "QByteArray" }
        }
        Method {
            name: "fromBase64"
            type: "QByteArray"
            Parameter { name: "text"; type: "QByteArray" }
        }
        Method {
            name: "joinFilePath"
            type: "string"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "formattedDataSize"
            type: "string"
            Parameter { name: "bytes"; type: "qlonglong" }
            Parameter { name: "precision"; type: "int" }
        }
        Method {
            name: "formattedDataSize"
            type: "string"
            Parameter { name: "bytes"; type: "qlonglong" }
        }
        Method {
            name: "formatDateTimeWithOffsetFromUtc"
            type: "string"
            Parameter { name: "dateTime"; type: "QDateTime" }
            Parameter { name: "format"; type: "string" }
        }
        Method {
            name: "formatDateTimeWithOffsetFromUtc"
            type: "string"
            Parameter { name: "dateTime"; type: "QDateTime" }
        }
        Method { name: "generateUuid"; type: "string" }
        Method {
            name: "validateJson"
            type: "bool"
            Parameter { name: "json"; type: "QByteArray" }
            Parameter { name: "schema"; type: "QByteArray" }
        }
        Method {
            name: "toHex"
            type: "string"
            Parameter { name: "number"; type: "qlonglong" }
            Parameter { name: "width"; type: "int" }
        }
        Method {
            name: "toHex"
            type: "string"
            Parameter { name: "number"; type: "qlonglong" }
        }
    }
}
