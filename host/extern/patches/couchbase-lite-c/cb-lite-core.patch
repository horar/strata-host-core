diff --git a/vendor/couchbase-lite-core/Networking/HTTP/HTTPLogic.cc b/vendor/couchbase-lite-core/Networking/HTTP/HTTPLogic.cc
index d21c27b2..5a7df435 100644
--- a/vendor/couchbase-lite-core/Networking/HTTP/HTTPLogic.cc
+++ b/vendor/couchbase-lite-core/Networking/HTTP/HTTPLogic.cc
@@ -311,7 +311,7 @@ namespace litecore { namespace net {
         if (!_isWebSocket)
             return failure(WebSocketDomain, kCodeProtocolError);
 
-        if (_responseHeaders["Connection"_sl] != "Upgrade"_sl
+        if ((_responseHeaders["Connection"_sl] != "Upgrade"_sl && _responseHeaders["Connection"_sl] != "upgrade"_sl)
                 || _responseHeaders["Upgrade"_sl] != "websocket"_sl) {
             return failure(WebSocketDomain, kCodeProtocolError,
                            "Server failed to upgrade connection"_sl);
diff --git a/vendor/couchbase-lite-core/Networking/WebSockets/WebSocketImpl.cc b/vendor/couchbase-lite-core/Networking/WebSockets/WebSocketImpl.cc
index c1015735..cfcf61e2 100644
--- a/vendor/couchbase-lite-core/Networking/WebSockets/WebSocketImpl.cc
+++ b/vendor/couchbase-lite-core/Networking/WebSockets/WebSocketImpl.cc
@@ -37,7 +37,7 @@ namespace litecore { namespace websocket {
     constexpr long WebSocketImpl::kConnectTimeoutSecs;
 
     // Default interval at which to send PING messages (configurable via options)
-    static constexpr auto kDefaultHeartbeatInterval = chrono::seconds(5 * 60);
+    static constexpr auto kDefaultHeartbeatInterval = chrono::seconds(30);
 
     // Timeout for disconnecting if no PONG response received
     static constexpr auto kPongTimeout  = chrono::seconds(10);
diff --git a/vendor/couchbase-lite-core/Networking/NetworkInterfaces.cc b/vendor/couchbase-lite-core/Networking/NetworkInterfaces.cc
index 87899c4f..8f54e3c4 100644
--- a/vendor/couchbase-lite-core/Networking/NetworkInterfaces.cc
+++ b/vendor/couchbase-lite-core/Networking/NetworkInterfaces.cc
@@ -244,10 +244,10 @@ namespace litecore::net {
         string hostName;
     #if TARGET_OS_OSX
         // On macOS, we can get it from SystemConfiguration (not available on iOS)
-        if (CFStringRef cfName = SCDynamicStoreCopyLocalHostName(NULL); cfName) {
-            nsstring_slice strsl(cfName);
-            hostName = string(strsl);
-        }
+        // if (CFStringRef cfName = SCDynamicStoreCopyLocalHostName(NULL); cfName) {
+        //     nsstring_slice strsl(cfName);
+        //     hostName = string(strsl);
+        // }
     #else
         // From <http://stackoverflow.com/a/16902907/98077>.
         // On iOS, gethostname() returns the mDNS/Bonjour hostname (without the ".local")
diff --git a/vendor/couchbase-lite-core/Replicator/c4RemoteReplicator.hh b/vendor/couchbase-lite-core/Replicator/c4RemoteReplicator.hh
index 31c1f5ab..5fb88da2 100644
--- a/vendor/couchbase-lite-core/Replicator/c4RemoteReplicator.hh
+++ b/vendor/couchbase-lite-core/Replicator/c4RemoteReplicator.hh
@@ -26,7 +26,7 @@ namespace c4Internal {
     public:
 
         // Maximum number of retries before a one-shot replication gives up
-        static constexpr unsigned kMaxOneShotRetryCount = 2;
+        static constexpr unsigned kMaxOneShotRetryCount = 0;
 
         // Longest possible retry delay, in seconds (only a continuous replication will reach this.)
         // But a call to c4repl_retry() will also trigger a retry.
