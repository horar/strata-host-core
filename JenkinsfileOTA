// REPO_NAME & ROOT_BUILD_DIR must be as short as possible
def REPO_NAME = "s"
def ROOT_BUILD_DIR = "b"
def BUILD_NAME = UUID.randomUUID().toString()
def INSTALLER_PATH_OFFLINE = ""
def INSTALLER_PATH_ONLINE = ""
pipeline {
    agent {
        node {
            label 'master'
            // TODO: hard drive letter should be loaded from ${env.SystemDrive} but node can't access env
            customWorkspace "C:/${REPO_NAME}"
        }
    }
    stages {
        stage('Build') {
            steps {
                sh "${env.workspace}/deployment/OTA/Strata/release_app.sh -r '${env.workspace}/${ROOT_BUILD_DIR}' -d '${BUILD_NAME}'"
            }
        }
        stage('Test') {
            steps {
                script {
                    INSTALLER_PATH_OFFLINE = ""
                    INSTALLER_PATH_ONLINE = ""
                    try {
                        INSTALLER_PATH_OFFLINE = sh(encoding: 'UTF-8', script: "find '${env.workspace}/${ROOT_BUILD_DIR}/${BUILD_NAME}' -type f  -iname 'strata-setup-offline*' ", returnStdout: true)
                        INSTALLER_PATH_OFFLINE = INSTALLER_PATH_OFFLINE.minus("\n")
                        echo "Installer Path Offline: $INSTALLER_PATH_OFFLINE"
                    } catch (err) {
                        echo "Offline Installer not available: ${err}"
                    }
                    try {
                        INSTALLER_PATH_ONLINE = sh(encoding: 'UTF-8', script: "find '${env.workspace}/${ROOT_BUILD_DIR}/${BUILD_NAME}' -type f  -iname 'strata-setup-online*' ", returnStdout: true)
                        INSTALLER_PATH_ONLINE = INSTALLER_PATH_ONLINE.minus("\n")
                        echo "Installer Path Online: $INSTALLER_PATH_ONLINE"
                    } catch (err) {
                        echo "Online Installer not available: ${err}"
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                sh "python -m venv ${env.workspace}/deployment/OTA/ota-deploy-env"
                sh "source ${env.workspace}/deployment/OTA/ota-deploy-env/Scripts/activate"
                sh "python -m pip install -r ${env.workspace}/deployment/OTA/requirements.txt"
                sh """python '${env.workspace}/deployment/OTA/main.py' strata \
                    --dir 'ota' \
                    --repo '${ROOT_BUILD_DIR}/${BUILD_NAME}/public/repository/strata' \
                    """
                // Note: Online and Offline installer will be part of artifacts and will not be uploaded to S3/DP for the moment
                    //--offline '${INSTALLER_PATH_OFFLINE}' \
                    //--online '${INSTALLER_PATH_ONLINE}' \
                script {
                    if ((INSTALLER_PATH_OFFLINE != "") || (INSTALLER_PATH_ONLINE != "")) {
                        archiveArtifacts artifacts: "${ROOT_BUILD_DIR}/${BUILD_NAME}/strata-setup-*", onlyIfSuccessful: true
                    }
                }
            }
        }
    }
}